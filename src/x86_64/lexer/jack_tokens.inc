JACK_TOKEN_UNDEFINED equ 0

JACK_TOKEN_KEYWORD equ 1
JACK_TOKEN_SYMBOL equ 2
JACK_TOKEN_IDENTIFIER equ 3

; CONSTANTS
JACK_CONSTANT_INTEGER equ 10
JACK_CONSTANT_STRING equ 11

JACK_KEYWORD_CLASS equ 0 ; class
JACK_KEYWORD_CONSTRUCTOR equ 1 ; constructor
JACK_KEYWORD_FUNCTION equ 2 ; function
JACK_KEYWORD_METHOD equ 3 ; method
JACK_KEYWORD_FIELD equ 4 ; field
JACK_KEYWORD_STATIC equ 5 ; static
JACK_KEYWORD_VAR equ 6 ; var
JACK_KEYWORD_INT equ 7 ; int
JACK_KEYWORD_CHAR equ 8 ; char
JACK_KEYWORD_BOOLEAN equ 9 ; boolean
JACK_KEYWORD_VOID equ 10 ; void
JACK_KEYWORD_TRUE equ 11 ; true
JACK_KEYWORD_FALSE equ 12 ; false
JACK_KEYWORD_NULL equ 13 ; null
JACK_KEYWORD_THIS equ 14 ; this
JACK_KEYWORD_LET equ 15 ; let
JACK_KEYWORD_DO equ 16 ; do
JACK_KEYWORD_IF equ 17 ; if
JACK_KEYWORD_ELSE equ 18 ; else
JACK_KEYWORD_WHILE equ 19 ; while
JACK_KEYWORD_RETURN equ 20 ; return

JACK_SYMBOL_LCURB equ 0 ; {
JACK_SYMBOL_RCURB equ 1 ; }
JACK_SYMBOL_LPARENTHESIS equ 2 ; (
JACK_SYMBOL_RPARENTHESIS equ 3 ; )
JACK_SYMBOL_LSQB equ 4 ; [
JACK_SYMBOL_RSQB equ 5 ; ]
JACK_SYMBOL_PERIOD equ 6 ; .
JACK_SYMBOL_COMMA equ 7 ; , 
JACK_SYMBOL_SEMICOLON equ 8 ; ;
JACK_SYMBOL_PLUS equ 9 ; +
JACK_SYMBOL_MINUS equ 10 ; -
JACK_SYMBOL_ASTERISK equ 11 ; *
JACK_SYMBOL_AMP  equ 12 ; &
JACK_SYMBOL_VERTICAL_BAR equ 13 ; |
JACK_SYMBOL_LT equ 14 ; <
JACK_SYMBOL_GT equ 15 ; >
JACK_SYMBOL_EQUALS equ 16 ; =
JACK_SYMBOL_TILDE equ 17 ; ~
JACK_SYMBOL_SOL equ 17 ; /